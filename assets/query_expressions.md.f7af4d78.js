import{_ as t,c as e,o as s,a as n}from"./app.aecb249e.js";const o="/assets/expressions.b6f41527.png",f=JSON.parse('{"title":"Expressions","description":"","frontmatter":{},"headers":[{"level":2,"title":"Aggregations","slug":"aggregations"},{"level":2,"title":"Operators","slug":"operators"},{"level":2,"title":"Functions","slug":"functions"}],"relativePath":"query/expressions.md","lastUpdated":1681986768000}'),i={name:"query/expressions.md"},r=n('<h1 id="expressions" tabindex="-1">Expressions <a class="header-anchor" href="#expressions" aria-hidden="true">#</a></h1><p>Expressions are used to add complex calculations to your query. You can use expressions to create complex filter conditions and to create calculated columns.</p><p>You can use expressions to create calculate new columns from existing columns. For example, you can create a new column that calculates the percentage of revenue generated by each product category.</p><p>To create a custom column or filter, switch to the <strong>Expressions</strong> tab in the Columns/Filter section.</p><p><img src="'+o+'" alt="Expressions"></p><div class="tip custom-block"><p class="custom-block-title">Expression Help</p><p>You can start typing a method or function name to see a list of available options. You can also use the autocomplete feature to see an example of how to use the method or function.</p><p>Alternatively, you can click on the <strong>Help</strong> icon to see a list of available methods and functions.</p></div><h2 id="aggregations" tabindex="-1">Aggregations <a class="header-anchor" href="#aggregations" aria-hidden="true">#</a></h2><p>While creating a custom column, you can use aggregations to summarize the column values. Following are the available aggregations:</p><ul><li><strong>sum</strong> - Sums up the values of a metric.</li><li><strong>avg</strong> - Calculates the average of the values of a metric.</li><li><strong>min</strong> - Finds the minimum value of a metric.</li><li><strong>max</strong> - Finds the maximum value of a metric.</li><li><strong>count</strong> - Counts the number of rows in a column.</li><li><strong>count_if</strong> - Counts the number of rows in a column that meets a condition.</li><li><strong>sum_if</strong> - Sums up the values of a metric that meet a condition.</li><li><strong>distinct</strong> - Returns the distinct values of a column.</li></ul><h2 id="operators" tabindex="-1">Operators <a class="header-anchor" href="#operators" aria-hidden="true">#</a></h2><p>You can use operators to perform calculations on the values of your columns. Following are the available operators:</p><ul><li><strong>+</strong> - Adds two numbers.</li><li><strong>-</strong> - Subtracts two numbers.</li><li><strong>*</strong> - Multiplies two numbers.</li><li><strong>/</strong> - Divides two numbers.</li><li><strong>=</strong> - Checks if two values are equal.</li><li><strong>!=</strong> - Checks if two values are not equal.</li><li><strong>&gt;</strong> - Checks if the first value is greater than the second value.</li><li><strong>&gt;=</strong> - Checks if the first value is greater than or equal to the second value.</li><li><strong>&lt;</strong> - Checks if the first value is less than the second value.</li><li><strong>&lt;=</strong> - Checks if the first value is less than or equal to the second value.</li><li><strong>&amp;&amp;</strong> - Checks if both conditions are true.</li><li><strong>||</strong> - Checks if either condition is true.</li></ul><h2 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-hidden="true">#</a></h2><p>You can use functions to transform, generate and manipulate data. Following are the available functions:</p><ul><li><strong>abs</strong>: Returns the absolute value of a number.</li><li><strong>floor</strong>: Rounds a number down to the nearest integer.</li><li><strong>ceil</strong>: Rounds a number up to the nearest integer.</li><li><strong>round</strong>: Rounds a number to the nearest integer.</li><li><strong>now</strong>: Returns the current date and time.</li><li><strong>today</strong>: Returns the current date.</li><li><strong>timespan</strong>: Returns two dates based on interval and unit.</li><li><strong>case</strong>: Returns a value based on conditions.</li><li><strong>in</strong>: Checks if a value is in a list.</li><li><strong>not_in</strong>: Checks if a value is not in a list.</li><li><strong>is_set</strong>: Checks if a column is set.</li><li><strong>is_not_set</strong>: Checks if a column is not set.</li><li><strong>between</strong>: Checks if a value is between two values.</li><li><strong>if_null</strong>: Returns a value if a column is null.</li><li><strong>coalesce</strong>: Returns the first non-null value.</li><li><strong>contains</strong>: Checks if the column value contains a substring.</li><li><strong>not_contains</strong>: Checks if the column value does not contain a substring.</li><li><strong>ends_with</strong>: Checks if the column value ends with a substring.</li><li><strong>starts_with</strong>: Checks if the column value starts with a substring.</li><li><strong>replace</strong>: Replaces a substring with another substring.</li><li><strong>lower</strong>: Converts a string to lowercase.</li><li><strong>upper</strong>: Converts a string to uppercase.</li><li><strong>concat</strong>: Concatenates two strings.</li></ul>',15),a=[r];function l(u,c,g,h,d,p){return s(),e("div",null,a)}const v=t(i,[["render",l]]);export{f as __pageData,v as default};
